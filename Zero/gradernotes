Disclaimer:
I wrote this code myself.

I believe everything works perfectly under all conditions.
My project has no known bugs, but is rather lengthy.

Sources:
state on/off concept - chapter 1.5.4
source: C Programming Language / Edition 2
by Brian W. Kernighan, Dennis Ritchie, Dennis M. Ritchie

Notes:
I have seen a previous example of a word counting system and used a similar "on/off" constant to determine
whether or not we were inside a word. Although both programs solve different problems entirely, some of its
logic was applied to my program and thinking process.

I couldn't quite figure out how many conditions there were or may be so my main focus behind my entire 
design is based loosely on a "state machines". I treated each 'token' 
as a condition that could shift us in or out of a word. Personally, thinking of it as a state machine made 
it easier to program based on the "transitions" dictated by tokens surrounding strings of words. I treated
each token's transitions seperately. Tokens that lead "out" of words such as ';', ' ', and '\n' were dealt
with first. The tokens ';' and '\n' act exactly the same in this model. Their transitions out of words 
trigger the same results, and their actions when independent print the same results. These two are lumped 
together until specifications change (no need to add additional functionality if it's not needed). 
The current biggest drawback is the sheer size of the code and it is difficult to read. 

